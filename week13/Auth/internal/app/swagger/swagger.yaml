basePath: /
definitions:
  schema.AccountCreateParam:
    properties:
      accountType:
        description: 账号类型
        type: string
      password:
        description: 密码
        type: string
      username:
        description: 用户名
        type: string
    required:
    - accountType
    - password
    - username
    type: object
  schema.AuthenticateInfo:
    properties:
      grant:
        description: "AccountKey \t\tstring \t`json:\"accountKey\"` \t// 账号标识\nAccountType
          \  \tstring \t`json:\"accountType\"`   \t// 账号类型"
        type: integer
    type: object
  schema.ErrorItem:
    properties:
      code:
        description: 错误码
        type: integer
      message:
        description: 错误信息
        type: string
    type: object
  schema.ErrorResult:
    properties:
      error:
        $ref: '#/definitions/schema.ErrorItem'
        description: 错误项
    type: object
  schema.LoginParam:
    properties:
      appKey:
        description: 应用标识
        type: string
      password:
        description: 密码(md5加密)
        type: string
      username:
        description: 用户名
        type: string
    required:
    - appKey
    - password
    - username
    type: object
  schema.LoginTokenInfo:
    properties:
      expiresAt:
        description: 令牌过期时间戳
        type: integer
      token:
        description: 访问令牌
        type: string
    type: object
  schema.NilResult:
    type: object
info:
  contact: {}
  description: RBAC scaffolding based on GIN + GORM + CASBIN + WIRE.
  title: Auth
  version: 0.1.0
paths:
  /api/external/login/authenticate:
    get:
      parameters:
      - description: 资源特征值
        in: query
        name: feature
        required: true
        type: string
      - description: 请求类型
        in: query
        name: method
        type: string
      - description: 资源类型（api|...）
        in: query
        name: resourceType
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.AuthenticateInfo'
        "401":
          description: '{error:{code:401, message:登录信息无效}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "403":
          description: '{error:{code:600, message:该应用尚未接入}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "500":
          description: '{error:{code:500,message:服务器错误}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
      summary: 调用鉴权
      tags:
      - 登录管理
  /api/pub/login:
    post:
      parameters:
      - description: 请求参数
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/schema.LoginParam'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.LoginTokenInfo'
        "403":
          description: '{error:{code:600, message:该应用尚未接入}}<br>{error:{code:1000,
            message:登录失败，账号或密码错误}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "500":
          description: '{error:{code:500, message:服务器错误}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
      summary: 用户登录
      tags:
      - 登录管理
  /api/pub/users:
    post:
      parameters:
      - description: 创建账号
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/schema.AccountCreateParam'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.NilResult'
        "400":
          description: '{error:{code:400,message:无效的请求参数。（账号标识不符合格式/账号名不符合格式）}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "403":
          description: '{error:{code:1200,message:账号标识已存在/账号名已存在}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "500":
          description: '{error:{code:500,message:服务器错误}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
      security:
      - ApiKeyAuth: []
      summary: 创建账号
      tags:
      - 账号管理
schemes:
- http
- https
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: RJ-Authorization RJ-AppKey
    type: apiKey
swagger: "2.0"
