// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.2.1

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type GreeterHTTPServer interface {
	CreateMovie(context.Context, *CreateMovieRequest) (*CreateMovieReply, error)
	GetMovie(context.Context, *GetMovieRequest) (*GetMovieReply, error)
	ListMovie(context.Context, *ListMovieRequest) (*ListMovieReply, error)
	UpdateMovie(context.Context, *UpdateMovieRequest) (*UpdateMovieReply, error)
}

func RegisterGreeterHTTPServer(s *http.Server, srv GreeterHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/movie", _Greeter_CreateMovie0_HTTP_Handler(srv))
	r.PUT("/v1/movie/{id}", _Greeter_UpdateMovie0_HTTP_Handler(srv))
	r.GET("/v1/movie/{id}", _Greeter_GetMovie0_HTTP_Handler(srv))
	r.GET("/v1/movie", _Greeter_ListMovie0_HTTP_Handler(srv))
}

func _Greeter_CreateMovie0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateMovieRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/helloworld.v1.Greeter/CreateMovie")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateMovie(ctx, req.(*CreateMovieRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateMovieReply)
		return ctx.Result(200, reply)
	}
}

func _Greeter_UpdateMovie0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateMovieRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/helloworld.v1.Greeter/UpdateMovie")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateMovie(ctx, req.(*UpdateMovieRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateMovieReply)
		return ctx.Result(200, reply)
	}
}

func _Greeter_GetMovie0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMovieRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/helloworld.v1.Greeter/GetMovie")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMovie(ctx, req.(*GetMovieRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMovieReply)
		return ctx.Result(200, reply)
	}
}

func _Greeter_ListMovie0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListMovieRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/helloworld.v1.Greeter/ListMovie")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListMovie(ctx, req.(*ListMovieRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListMovieReply)
		return ctx.Result(200, reply)
	}
}

type GreeterHTTPClient interface {
	CreateMovie(ctx context.Context, req *CreateMovieRequest, opts ...http.CallOption) (rsp *CreateMovieReply, err error)
	GetMovie(ctx context.Context, req *GetMovieRequest, opts ...http.CallOption) (rsp *GetMovieReply, err error)
	ListMovie(ctx context.Context, req *ListMovieRequest, opts ...http.CallOption) (rsp *ListMovieReply, err error)
	UpdateMovie(ctx context.Context, req *UpdateMovieRequest, opts ...http.CallOption) (rsp *UpdateMovieReply, err error)
}

type GreeterHTTPClientImpl struct {
	cc *http.Client
}

func NewGreeterHTTPClient(client *http.Client) GreeterHTTPClient {
	return &GreeterHTTPClientImpl{client}
}

func (c *GreeterHTTPClientImpl) CreateMovie(ctx context.Context, in *CreateMovieRequest, opts ...http.CallOption) (*CreateMovieReply, error) {
	var out CreateMovieReply
	pattern := "/v1/movie"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/helloworld.v1.Greeter/CreateMovie"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) GetMovie(ctx context.Context, in *GetMovieRequest, opts ...http.CallOption) (*GetMovieReply, error) {
	var out GetMovieReply
	pattern := "/v1/movie/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/helloworld.v1.Greeter/GetMovie"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) ListMovie(ctx context.Context, in *ListMovieRequest, opts ...http.CallOption) (*ListMovieReply, error) {
	var out ListMovieReply
	pattern := "/v1/movie"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/helloworld.v1.Greeter/ListMovie"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) UpdateMovie(ctx context.Context, in *UpdateMovieRequest, opts ...http.CallOption) (*UpdateMovieReply, error) {
	var out UpdateMovieReply
	pattern := "/v1/movie/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/helloworld.v1.Greeter/UpdateMovie"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
